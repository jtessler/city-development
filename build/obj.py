#!/usr/bin/env python

"""Produces JavaScript from all objects in obj/"""

import re
import os

def isObj(filename):
  return filename.endswith(".obj")

def convertObj(V, T, N, F):
  vertices = []
  normals = []
  textureUVs = []
  indices = []
  index = 0
  for face in F:
    for vertex in face:
      vertices.extend(V[vertex[0]])
      textureUVs.extend(T[vertex[1]])
      normals.extend(N[vertex[2]])
      indices.append(index)
      index += 1
  return vertices, normals, textureUVs, indices

# SOURCE: http://programminglinuxgames.blogspot.com/2010/09/
#     parsing-wavefront-obj-file-format-using.html
def loadObj(filename) :
  V = [] #vertex
  T = [] #texcoords
  N = [] #normals
  F = [] #face indices

  fh = open(filename)
  for line in fh:
    if len(line) == 0 or line[0] == '#':
      continue
    line = line.strip().split(' ')
    if line[0] == 'v': #vertex
      V.append(line[1:])
    elif line[0] == 'vt': #tex-coord
      T.append(line[1:])
    elif line[0] == 'vn': #normal vector
      N.append(line[1:])
    elif line[0] == 'f': #face
      face = line[1:]
      if len(face) != 3:
        raise Exception('NOT A TRIANGLE FACE: ' + line)
      for i in range(0, len(face)) :
        face[i] = face[i].split('/')
        # OBJ indexies are 1 based not 0 based hence the -1
        # convert indexies to integer
        for j in range(0, len(face[i])):
          face[i][j] = int(face[i][j]) - 1
      F.append(face)
  return V, T, N, F

print "/* THIS FILE IS AUTOMATICALLY GENERATED */\n"
print "goog.provide('cidev.webgl.mesh.obj');"
for filename in filter(isObj, os.listdir("obj/")):
  (V, T, N, F) = loadObj("obj/" + filename)
  (v, t, n, i) = convertObj(V, T, N, F)
  print "\n/** @type {{vertices, normals, textureUVs, indices}} */"
  print "cidev.webgl.mesh.obj['%s'] = {" % filename
  print "    vertices: new Float32Array([%s])," % \
      reduce(lambda x, y: x + ", " + y, v)
  print "    normals: new Float32Array([%s])," % \
      reduce(lambda x, y: x + ", " + y, n)
  print "    textureUVs: new Float32Array([%s])," % \
      reduce(lambda x, y: x + ", " + y, t)
  print "    indices: new Uint8Array([%s])" % \
      reduce(lambda x, y: "%s, %d" % (x, y), i)
  print "};"
